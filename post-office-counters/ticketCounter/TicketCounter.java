package ticketCounter;//********************************************************************//  TicketCounter.java       Authors: Lewis/Chase (Modified by Wong)////  Demonstrates the use of a queue for simulating a waiting line.//********************************************************************import jss2.*;public class TicketCounter    {	// Average processing time for each customer's request is 120 seconds.	final static int PROCESS = 120;	// Maximum number of cashiers that we are going to have in this simulation.	final static int MAX_CASHIERS = 10;	// Total number of customers who need to be served. 	final static int NUM_CUSTOMERS = 100;		/**	 * The simulation	 * @param args	 */	public static void main ( String[] args) 	{		/* !!!! Create a CircularArrayQueue object for simulating the queue of		 * 		customers. 		 */				/* ++++ 		 * Keep track of the amount of time that each cashier has worked for		 * 	so as to clear the queue.		 */ 		int[] cashierTime = new int[MAX_CASHIERS];					/* process the simulation for various number of cashiers */		for (int cashiers=0; cashiers < MAX_CASHIERS; cashiers++)		{ 			/* set each cashiers time to zero initially*/			for (int count=0; count < cashiers; count++)				cashierTime[count] = 0;						/* !!!! Preload the customer waiting queue with the specified number			 * 		of customers. 			 * 		Before a customer can be added to the queue, a Customer object			 * 		representing the customer needs to be created. 			 * 		As a new customer is meant to join the queue in 			 * 		every 15 seconds, the time of arrival for each customer 			 * 		needs to reflect this.  			 * 		Each created Customer object should be added to the customer			 * 		queue by the enqueue operation.			 */												int totalTime = 0;						/* process all customers in the queue */			while (!(customerQueue.isEmpty())) 			{				// Each cashier takes turn to serve a customer in the waiting queue.				for (int count=0; count <= cashiers; count++)				{					int departs;					if (!(customerQueue.isEmpty()))					{						Customer customer = customerQueue.dequeue();						if (customer.getArrivalTime() > cashierTime[count])							/* This customer arrived at an empty queue, so no need							 * without to wait for a cashier before being served.							 */ 							departs = customer.getArrivalTime() + PROCESS;						else							/* This customer has to wait for a cashier to be 							 * free before being served.							 */							departs = cashierTime[count] + PROCESS; 						// Now we know the departure time of this customer...						customer.setDepartureTime (departs);						// We also know how long this cashier has worked till now.						cashierTime[count] = departs;						/* Accumulate the time that each customer actually spent						 * at the ticket centre (i.e. from arriving till having						 * purchased their ticket(s)).						 */ 						totalTime += customer.totalTime();					}				}			}						/* output results for this simulation */			// The average time that each customer spent at the ticket center.			int averageTime = totalTime / NUM_CUSTOMERS;			System.out.println ("Number of cashiers: " + (cashiers+1));			System.out.println ("Average time: " + averageTime + "\n");		}	}}